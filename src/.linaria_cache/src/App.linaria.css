.cm0as6w{position:absolute;background:black;font-family:Orbitron;color:white;font-size:60px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;width:100%;height:100%;}
.b13mnax5{color:white;font-family:Raleway;position:absolute;top:0;left:0;font-size:25px;padding:20px;cursor:pointer;color:red;-webkit-transition:all 0.3s ease;transition:all 0.3s ease;}.b13mnax5:hover{color:white;}
.nbb0x40{-webkit-transition:all 3s ease;transition:all 3s ease;-webkit-transition-delay:8s;transition-delay:8s;position:absolute;}
.dlx5ske{font-family:Raleway;color:white;font-size:39px;padding-top:6px;}
.r1m43pa2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:"row";-ms-flex-direction:"row";flex-direction:"row";-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}
.lvm80j5{cursor:pointer;padding-top:15px;font-size:30px;color:white;-webkit-transition:all 0.3s ease;transition:all 0.3s ease;}.lvm80j5:hover{-webkit-transform:translateY(-3px);-ms-transform:translateY(-3px);transform:translateY(-3px);}
/*# sourceMappingURL=data:application/json;base64,*/